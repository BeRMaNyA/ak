c
self.class::URL
self.class
c
gtc
exit
path
caller_path
exit
path
c
path
exit
::AkReloader.registry.load(path, const)
path
exit
n
c
exit
pp AkReloader.registry.files.map(&:name)
AkReloader.registry.load(path, const)
path
pp AkReloader.registry.files.map(&:name)
AkReloader.registry.files.map(&:name)
AkReloader.registry.load(path, const)
exit
self
exit
self
c
self
c
self
c
valid_const
c
valid_const
self
c
valid_const
c
valid_const
c
exit
::AkReloader.registry.files.map(&:const)
::AkReloader.registry.files
::AkReloader.registry.load(path, const)
path
::AkReloader.registry
::AkReloader.registry.load(path, const)
c
const
path
exit
path
caller_path
c
exit
c
jc
c
self
exit
self
name
c
self
c
self
c
self
c
self
n
self
n
n]
self
n
self
c
gtc
exit
original_require name
original_require path
class Repositories::Quote
class Repositories::Quote \ end
class Repositories::Quote
class Repositories::Quote; end
require_relative name
original_require name
Repositories::Quote
self
c
original_require name
n
self
exit
self
c
n
self
c
exit
self
n
self
n
@descendants
c
cc
c
Repositories::Quote
load_file
unload
c
Repositories
load(name)
name
Repositories::Quote
self
l=
module Repositories; class Quote; end; end
module Repositories
  class Quote < Base
module Repositories
      original_require name
unload
self
AkReloader.registry
self
c
cc
c
exit
self.load_file
self.unload
self
c
exit
self
n
self
n
self
c
cc
c
const
name
c
self
const
name
c
exit
c
exit
load_file
unload
self
c
self
n
Repositories::Quote
Object.const_get(parent).send(:remove_const, match[1])
parent = const.to_s.gsub("::#{match[1]}", '')
Repositories::Quote
self
c
n
parent
n
match[1]
self
match
c
valid_const
c
Repositories::Quote
self
valid_const
c
self
valid_const
c
valid_const
self
c
self
valid_const
c
valid_const
self
valid_const
exit
self.class.const_get("Requests::#{self.class.to_s.split('::').last}")
self.class.const_get("Requests::#{self.class.to_ssplit('::').last}")
self.class.const_get("Requests::#{self.class.split('::').last}")
self.class
 Object.const_get("Requests::#{self.class}")
self
seld
mode
mosw
c
valid_const
c
self
c
consts
conts
c
consts
const
n
exit
Inflector.camelize("routes/hot_app")
path
name
path
c
consts
path
HotReloader.root
self
consts
valid_const
exit
self
c
self
unload
HotApp
unload
HotApp
unload
